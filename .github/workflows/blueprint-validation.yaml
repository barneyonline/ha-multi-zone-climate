blueprint:
  name: Dynamic Multi-Zone Climate Schedule (2025-06)
  description: >
    Computes a single global HVAC mode (heat/cool/dry/off) based on the most
    urgent zone need, applies it once to a shared climate head-unit, then
    staggers per-zone damper control by urgency. Respects manual overrides and
    includes hysteresis. Optionally gates on selected person entities being home.
  domain: automation
  homeassistant:
    min_version: "2025.6.0"
  source_url: https://github.com/barneyonline/ha-multi-zone-climate/blob/main/blueprints/automation/multi_zone_climate.yaml

  input:
    # ───────────── Scheduling ─────────────
    start_time:
      name: Schedule Start Time
      selector: { time: {} }

    end_time:
      name: Schedule End Time
      selector: { time: {} }

    days:
      name: Active Days
      default: [mon, tue, wed, thu, fri, sat, sun]
      selector:
        select:
          multiple: true
          options:
            - {label: Monday,    value: mon}
            - {label: Tuesday,   value: tue}
            - {label: Wednesday, value: wed}
            - {label: Thursday,  value: thu}
            - {label: Friday,    value: fri}
            - {label: Saturday,  value: sat}
            - {label: Sunday,    value: sun}

    enabled_flag:
      name: Enable Automation
      selector: { entity: { domain: input_boolean } }

    manual_override:
      name: Manual Override Flag
      selector: { entity: { domain: input_boolean } }

    # ───────────── Optional presence gate ─────────────
    persons:
      name: Person(s) required to be home (optional)
      description: If set, at least one must be 'home' for the schedule to run. Leave empty to ignore presence.
      default: []
      selector:
        entity:
          domain: person
          multiple: true

    # ───────────── Shared head-unit ─────────────
    head_unit:
      name: Climate Head-Unit
      selector: { entity: { domain: climate } }

    # ───────────── Thresholds & Setpoints ─────────────
    low_temp:
      name: Low Temperature Threshold
      default: 19
      selector: { number: { min: 5, max: 30, unit_of_measurement: "°C" } }

    heat_set:
      name: Heat Setpoint
      default: 21
      selector: { number: { min: 10, max: 30, unit_of_measurement: "°C" } }

    high_temp:
      name: High Temperature Threshold
      default: 24
      selector: { number: { min: 15, max: 35, unit_of_measurement: "°C" } }

    cool_set:
      name: Cool Setpoint
      default: 23
      selector: { number: { min: 15, max: 35, unit_of_measurement: "°C" } }

    heat_hysteresis:
      name: Heat Hysteresis
      default: 0
      selector: { number: { min: 0, max: 5, step: 0.5, unit_of_measurement: "°C" } }

    cool_hysteresis:
      name: Cool Hysteresis
      default: 0
      selector: { number: { min: 0, max: 5, step: 0.5, unit_of_measurement: "°C" } }

    dry_hysteresis:
      name: Dry Hysteresis
      default: 0
      selector: { number: { min: 0, max: 20, step: 1, unit_of_measurement: "%" } }

    dry_temp:
      name: Dry-Mode Temperature Threshold
      default: 22
      selector: { number: { min: 5, max: 30, unit_of_measurement: "°C" } }

    hum_high:
      name: High Humidity Threshold
      default: 60
      selector: { number: { min: 20, max: 100, unit_of_measurement: "%" } }

    damper_delay:
      name: Damper Update Delay
      default: 10
      selector: { number: { min: 0, max: 60, unit_of_measurement: "s" } }

    # ───────────── Zones ─────────────
    zones:
      name: Zones Configuration
      description: |
        Configure up to 8 zones. For each zone:
          – damper_switch (required)
          – one or more temperature sensors and/or humidity sensors.
        Optional per-zone overrides let you tailor thresholds if they differ from globals.
      default:
        - name: Zone 1
          area: null
          damper_switch: ""
          temp_sensors: []
          humidity_sensors: []
          low_temp: null
          high_temp: null
          dry_temp: null
          hum_high: null
      selector: { object: {} }

# ───────────── Top-level variables (safe to use in conditions) ─────────────
variables:
  persons: !input persons

trigger:
  - platform: time
    at: !input start_time
  - platform: time
    at: !input end_time
  - platform: state
    entity_id: !input head_unit

condition:
  # 0) Optional presence: if persons list is non-empty, require at least one 'home'
  - condition: template
    value_template: >-
      {% set ids = persons if persons is iterable else [persons] %}
      {% if (ids | length) > 0 %}
        {{ expand(ids) | selectattr('state','equalto','home') | list | count > 0 }}
      {% else %}
        true
      {% endif %}

  # 1) Enabled flag
  - condition: state
    entity_id: !input enabled_flag
    state: "on"

  # 2) Manual override must be off
  - condition: state
    entity_id: !input manual_override
    state: "off"

  # 3) Within schedule window & days
  - condition: time
    after: !input start_time
    before: !input end_time
    weekday: !input days

action:
  - variables:
      zones: !input zones

      # Global thresholds & setpoints
      low:          "{{ input('low_temp') | float }}"
      high:         "{{ input('high_temp') | float }}"
      dry_t:        "{{ input('dry_temp') | float }}"
      hum_h:        "{{ input('hum_high') | float }}"
      heat_sp:      "{{ input('heat_set') | float }}"
      cool_sp:      "{{ input('cool_set') | float }}"
      heat_buf:     "{{ input('heat_hysteresis') | float }}"
      cool_buf:     "{{ input('cool_hysteresis') | float }}"
      dry_buf:      "{{ input('dry_hysteresis') | float }}"
      damper_delay: "{{ input('damper_delay') | int }}"

      # Per-zone computations
      zone_data: >-
        {% set out = [] %}
        {% for z in zones %}
          {% if not z.damper_switch
                or ((z.temp_sensors | count == 0) and (z.humidity_sensors | count == 0)) %}
          {% else %}
            {% set temps = z.temp_sensors
               | map('states') | reject('in', ['unknown','unavailable'])
               | map('float') | list %}
            {% set temp = (temps | sum) / (temps | length) if temps | length > 0 else none %}

            {% set hums = z.humidity_sensors
               | map('states') | reject('in', ['unknown','unavailable'])
               | map('float') | list %}
            {% set hum = (hums | sum) / (hums | length) if hums | length > 0 else none %}

            {% set z_low    = (z.low_temp  | default(low))   | float %}
            {% set z_high   = (z.high_temp | default(high))  | float %}
            {% set z_dry_t  = (z.dry_temp  | default(dry_t)) | float %}
            {% set z_hum_h  = (z.hum_high  | default(hum_h)) | float %}

            {% set heat_sc = (z_low - temp)
               if (temp is not none and temp < z_low - heat_buf) else 0 %}
            {% set cool_sc = (temp - z_high)
               if (temp is not none and temp > z_high + cool_buf) else 0 %}
            {% set dry_sc  = (hum - z_hum_h)
               if (hum  is not none and hum  > z_hum_h + dry_buf
                   and temp is not none and temp > z_dry_t) else 0 %}
            {% set urg = [heat_sc, cool_sc, dry_sc] | max %}

            {% set _ = out.append({
              "switch":   z.damper_switch,
              "temp":     temp,
              "hum":      hum,
              "heat":     heat_sc,
              "cool":     cool_sc,
              "dry":      dry_sc,
              "urgency":  urg
            }) %}
          {% endif %}
        {% endfor %}
        {{ out | sort(attribute='urgency', reverse=true) }}

      scores: >-
        {% set heats = zone_data | map(attribute='heat') | list %}
        {% set cools = zone_data | map(attribute='cool') | list %}
        {% set drys  = zone_data | map(attribute='dry')  | list %}
        {{ {
          "heat": (heats | default([0]) | max),
          "cool": (cools | default([0]) | max),
          "dry":  (drys  | default([0]) | max)
        } }}

      mode: >-
        {% set best = scores | dictsort(attribute=1, reverse=true) | first %}
        {{ best[0] if best and best[1] > 0 else 'off' }}

      set_temp: >-
        {% if mode == 'heat' %}{{ heat_sp }}
        {% elif mode == 'cool' %}{{ cool_sp }}
        {% else %}none{% endif %}

  # 1) Set global HVAC mode
  - service: climate.set_hvac_mode
    target:
      entity_id: !input head_unit
    data:
      hvac_mode: "{{ mode }}"

  # 2) Update setpoint when heating/cooling
  - choose:
      - conditions: "{{ mode in ['heat', 'cool'] }}"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input head_unit
            data:
              temperature: "{{ set_temp }}"

  # 3) Stagger damper switches by urgency
  - repeat:
      for_each: "{{ zone_data }}"
      sequence:
        - delay: "00:00:{{ damper_delay }}"
        - choose:
            - conditions: "{{ repeat.item.urgency > 0 }}"
              sequence:
                - service: switch.turn_on
                  target:
                    entity_id: "{{ repeat.item.switch }}"
          default:
            - service: switch.turn_off
              target:
                entity_id: "{{ repeat.item.switch }}"

mode: restart
