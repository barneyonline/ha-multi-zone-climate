blueprint:
  name: Dynamic Multi‑Zone Climate Schedule (2025‑06)
  description: >
    Computes a single global HVAC mode (heat/cool/dry/off) based on the most
    urgent zone need, applies it once to a shared climate head‑unit, then
    staggers per‑zone damper control by urgency. Respects manual overrides and
    includes hysteresis.
  domain: automation
  homeassistant:
    min_version: "2025.6.0"           # semantic version must include patch
  source_url: https://github.com/barneyonline/ha-multi-zone-climate/blob/main/blueprints/automation/multi_zone_climate.yaml

  input:
    # ───────────── Scheduling ─────────────
    start_time:
      name: Schedule Start Time
      description: When this schedule window begins
      selector:
        time: {}

    end_time:
      name: Schedule End Time
      description: When this schedule window ends
      selector:
        time: {}

    days:
      name: Active Days
      description: Days of the week when this schedule runs
      default:
        - mon
        - tue
        - wed
        - thu
        - fri
        - sat
        - sun
      selector:
        select:
          multiple: true
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun

    enabled_flag:
      name: Enable Automation
      description: Toggle this schedule on/off
      selector:
        entity:
          domain: input_boolean

    manual_override:
      name: Manual Override Flag
      description: Pauses schedule when turned on
      selector:
        entity:
          domain: input_boolean

    # ───────────── Shared head‑unit ─────────────
    head_unit:
      name: Climate Head‑Unit
      description: The global climate entity to control (e.g. Daikin, Fujitsu)
      selector:
        entity:
          domain: climate

    # ───────────── Thresholds & Setpoints ─────────────
    low_temp:
      name: Low Temperature Threshold
      description: Below this → heating
      default: 19
      selector:
        number:
          min: 5
          max: 30
          unit_of_measurement: "°C"

    heat_set:
      name: Heat Setpoint
      description: Target when heating
      default: 21
      selector:
        number:
          min: 10
          max: 30
          unit_of_measurement: "°C"

    high_temp:
      name: High Temperature Threshold
      description: Above this → cooling
      default: 24
      selector:
        number:
          min: 15
          max: 35
          unit_of_measurement: "°C"

    cool_set:
      name: Cool Setpoint
      description: Target when cooling
      default: 23
      selector:
        number:
          min: 15
          max: 35
          unit_of_measurement: "°C"

    heat_hysteresis:
      name: Heat Hysteresis
      description: Degrees below the low threshold to trigger heating
      default: 0
      selector:
        number:
          min: 0
          max: 5
          step: 0.5
          unit_of_measurement: "°C"

    cool_hysteresis:
      name: Cool Hysteresis
      description: Degrees above the high threshold to trigger cooling
      default: 0
      selector:
        number:
          min: 0
          max: 5
          step: 0.5
          unit_of_measurement: "°C"

    dry_hysteresis:
      name: Dry Hysteresis
      description: Percent above the humidity threshold to trigger dry mode
      default: 0
      selector:
        number:
          min: 0
          max: 20
          step: 1
          unit_of_measurement: "%"

    dry_temp:
      name: Dry‑Mode Temperature Threshold
      description: Above this + high humidity → dry mode
      default: 22
      selector:
        number:
          min: 5
          max: 30
          unit_of_measurement: "°C"

    hum_high:
      name: High Humidity Threshold
      description: Above this → dry mode
      default: 60
      selector:
        number:
          min: 20
          max: 100
          unit_of_measurement: "%"

    damper_delay:
      name: Damper Update Delay
      description: Seconds to wait between zone damper changes
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: "s"

    # ───────────── Zones ─────────────
    zones:
      name: Zones Configuration
      description: |
        Configure up to 8 zones.  For each zone specify:
          – damper_switch       (required)
          – one or more temperature sensors and/or humidity sensors.
        Optional per‑zone overrides let you tailor temperature
        and humidity thresholds if they differ from the global ones.
        The entry is edited as YAML because the blueprint schema
        does not (yet) support a fully structured form for an array
        of dictionaries.
      default:
        - name: Zone 1
          area: null
          damper_switch: ""
          temp_sensors: []
          humidity_sensors: []
          low_temp: null
          high_temp: null
          dry_temp: null
          hum_high: null
      selector:
        object: {}           # object selector must remain bare

trigger:
  - platform: time
    at: !input start_time
  - platform: time
    at: !input end_time
  - platform: state
    entity_id: !input head_unit

condition:
  - condition: template
    value_template: "{{ is_state(!input enabled_flag, 'on') }}"
  - condition: state
    entity_id: !input manual_override
    state: "off"
  - condition: time
    after: !input start_time
    before: !input end_time
    weekday: !input days

action:
  - variables:
      zones: !input zones

      # Global thresholds & setpoints
      low:        "{{ float(!input.low_temp) }}"
      high:       "{{ float(!input.high_temp) }}"
      dry_t:      "{{ float(!input.dry_temp) }}"
      hum_h:      "{{ float(!input.hum_high) }}"
      heat_sp:    "{{ float(!input.heat_set) }}"
      cool_sp:    "{{ float(!input.cool_set) }}"
      heat_buf:   "{{ float(!input.heat_hysteresis) }}"
      cool_buf:   "{{ float(!input.cool_hysteresis) }}"
      dry_buf:    "{{ float(!input.dry_hysteresis) }}"
      damper_delay: "{{ int(!input.damper_delay) }}"

      # ── Gather zone readings & compute urgency ──
      zone_data: >
        {% set out = [] %}
        {% for z in zones %}
          {% if not z.damper_switch
               or (z.temp_sensors | count == 0 and z.humidity_sensors | count == 0) %}
            {{ log('Skipping zone ' ~ (z.name or z.area or 'unknown') ~
                    ' because it is missing a damper switch or sensors', 'warning') }}
          {% else %}
            {% set temps = z.temp_sensors
               | map('states') | reject('in', ['unknown','unavailable'])
               | map('float') | list %}
            {% set temp = (temps | sum) / (temps | length)
               if temps | length > 0 else none %}

            {% set hums = z.humidity_sensors
               | map('states') | reject('in', ['unknown','unavailable'])
               | map('float') | list %}
            {% set hum = (hums | sum) / (hums | length)
               if hums | length > 0 else none %}

            {% set z_low    = (z.low_temp   | default(low))   | float %}
            {% set z_high   = (z.high_temp  | default(high))  | float %}
            {% set z_dry_t  = (z.dry_temp   | default(dry_t)) | float %}
            {% set z_hum_h  = (z.hum_high   | default(hum_h)) | float %}

            {% set heat_sc = (z_low - temp)
               if (temp is not none and temp < z_low - heat_buf) else 0 %}
            {% set cool_sc = (temp - z_high)
               if (temp is not none and temp > z_high + cool_buf) else 0 %}
            {% set dry_sc  = (hum - z_hum_h)
               if (hum  is not none and hum  > z_hum_h + dry_buf
                   and temp is not none and temp > z_dry_t) else 0 %}
            {% set urg = [heat_sc, cool_sc, dry_sc] | max %}

            {% set _ = out.append({
              "switch":   z.damper_switch,
              "temp":     temp,
              "hum":      hum,
              "heat":     heat_sc,
              "cool":     cool_sc,
              "dry":      dry_sc,
              "urgency":  urg
            }) %}
          {% endif %}
        {% endfor %}
        {{ out | sort(attribute="urgency", reverse=true) }}

      # ── Per‑mode max scores ──
      scores: >
        {{ {
          "heat": (zone_data | map(attribute="heat") | max(default=0)),
          "cool": (zone_data | map(attribute="cool") | max(default=0)),
          "dry":  (zone_data | map(attribute="dry")  | max(default=0))
        } }}

      # ── Decide global HVAC mode ──
      mode: >
        {% set best = scores | dictsort(attribute=1, reverse=true) | first %}
        {{ best[0] if best[1] > 0 else 'off' }}

      set_temp: >
        {% if mode == 'heat' %}{{ heat_sp }}
        {% elif mode == 'cool' %}{{ cool_sp }}
        {% else %}none{% endif %}

  # 1  Set global HVAC mode
  - service: climate.set_hvac_mode
    target:
      entity_id: !input head_unit
    data:
      hvac_mode: "{{ mode }}"

  # 2  Update setpoint (only when heating or cooling)
  - choose:
      - conditions: "{{ mode in ['heat', 'cool'] }}"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input head_unit
            data:
              temperature: "{{ set_temp }}"

  # 3  Stagger damper switches in urgency order
  - repeat:
      for_each: "{{ zone_data }}"
      sequence:
        - delay: "00:00:{{ damper_delay }}"
        - choose:
            - conditions: "{{ repeat.item.urgency > 0 }}"
              sequence:
                - service: switch.turn_on
                  target:
                    entity_id: "{{ repeat.item.switch }}"
          default:
            - service: switch.turn_off
              target:
                entity_id: "{{ repeat.item.switch }}"

mode: restart
