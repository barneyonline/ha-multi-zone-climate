blueprint:
  name: Dynamic Multi-Zone Climate Schedule (2025-06)
  description: >
    Computes a single global HVAC mode (heat/cool/dry/off) based on the most
    urgent zone need, applies it once to a shared climate head-unit, then
    staggers per-zone damper control by urgency. Respects manual overrides and
    includes hysteresis. Optionally gates on selected person entities being home.
  domain: automation
  # Avoid gating import on very new releases; keep broad compatibility
  # homeassistant:
  #   min_version: "2025.6.0"
  source_url: https://github.com/barneyonline/ha-multi-zone-climate/blob/main/blueprints/automation/multi_zone_climate.yaml

  input:
    start_time:
      name: Schedule Start Time
      selector: { time: {} }
    end_time:
      name: Schedule End Time
      selector: { time: {} }

    days:
      name: Active Days
      default: [mon, tue, wed, thu, fri, sat, sun]
      selector:
        select:
          multiple: true
          options:
            - {label: Monday,    value: mon}
            - {label: Tuesday,   value: tue}
            - {label: Wednesday, value: wed}
            - {label: Thursday,  value: thu}
            - {label: Friday,    value: fri}
            - {label: Saturday,  value: sat}
            - {label: Sunday,    value: sun}

    enabled_flag:
      name: Enable Automation
      selector: { entity: { domain: input_boolean } }

    manual_override:
      name: Manual Override Flag
      selector: { entity: { domain: input_boolean } }

    persons:
      name: Person(s) required to be home (optional)
      description: If set, at least one must be 'home' for the schedule to run. Leave empty to ignore presence.
      default: []
      selector:
        entity:
          domain: person
          multiple: true

    head_unit:
      name: Climate Head-Unit
      selector: { entity: { domain: climate } }

    allow_heat:
      name: Allow Heating Mode
      description: Toggle to permit automatic heating mode selection.
      default: true
      selector: { boolean: {} }

    allow_cool:
      name: Allow Cooling Mode
      description: Toggle to permit automatic cooling mode selection.
      default: true
      selector: { boolean: {} }

    allow_dry:
      name: Allow Dry Mode
      description: Toggle to permit automatic dehumidifying mode selection.
      default: true
      selector: { boolean: {} }

    control_head_unit:
      name: Control Head-Unit
      description: If disabled, the blueprint will not change the climate head-unit mode or temperature.
      default: true
      selector: { boolean: {} }

    control_dampers:
      name: Control Zone Dampers
      description: If disabled, damper switches will not be toggled.
      default: true
      selector: { boolean: {} }

    low_temp:
      name: Low Temperature Threshold
      default: 19
      selector: { number: { min: 5, max: 30, unit_of_measurement: "°C" } }

    heat_set:
      name: Heat Setpoint
      default: 21
      selector: { number: { min: 10, max: 30, unit_of_measurement: "°C" } }

    high_temp:
      name: High Temperature Threshold
      default: 24
      selector: { number: { min: 15, max: 35, unit_of_measurement: "°C" } }

    cool_set:
      name: Cool Setpoint
      default: 23
      selector: { number: { min: 15, max: 35, unit_of_measurement: "°C" } }

    heat_hysteresis:
      name: Heat Hysteresis
      default: 0
      selector: { number: { min: 0, max: 5, step: 0.5, unit_of_measurement: "°C" } }

    cool_hysteresis:
      name: Cool Hysteresis
      default: 0
      selector: { number: { min: 0, max: 5, step: 0.5, unit_of_measurement: "°C" } }

    dry_hysteresis:
      name: Dry Hysteresis
      default: 0
      selector: { number: { min: 0, max: 20, step: 1, unit_of_measurement: "%" } }

    dry_temp:
      name: Dry-Mode Temperature Threshold
      default: 22
      selector: { number: { min: 5, max: 30, unit_of_measurement: "°C" } }

    hum_high:
      name: High Humidity Threshold
      default: 60
      selector: { number: { min: 20, max: 100, unit_of_measurement: "%" } }

    damper_delay:
      name: Damper Update Delay
      default: 10
      selector: { number: { min: 0, max: 60, unit_of_measurement: "s" } }

    update_interval:
      name: Update Interval
      description: How often to re-evaluate zones and update head unit/dampers.
      default: 1m
      selector:
        select:
          options:
            - { label: Every 15 seconds, value: 15s }
            - { label: Every 30 seconds, value: 30s }
            - { label: Every 1 minute,  value: 1m }
            - { label: Every 5 minutes, value: 5m }

    temperature_sync_script:
      name: Temperature Sync Script
      description: Optional script to run after updating the head-unit setpoint. Leave empty to disable.
      default: null
      selector:
        entity:
          domain: script

    zones:
      name: Zones Configuration
      description: |
        Configure up to 8 zones. For each zone:
          – damper_switch (required)
          – one or more temperature sensors and/or humidity sensors.
        Optional per-zone overrides let you tailor thresholds if they differ from globals.
        You may also specify an input_boolean "enabled_flag" to dynamically enable or disable the zone.
      default:
        - name: Zone 1
          area: null
          damper_switch: ""
          enabled_flag: ""
          temp_sensors: []
          humidity_sensors: []
          low_temp: null
          high_temp: null
          dry_temp: null
          hum_high: null
      selector: { object: {} }

variables:
  persons: !input persons

trigger_variables:
  _interval: !input update_interval

triggers:
  - trigger: time
    at: !input start_time
  - trigger: time
    at: !input end_time
  - trigger: state
    entity_id: !input head_unit
  # Recalculate regularly so zone dampers/head unit respond to sensor changes
  - trigger: time_pattern
    seconds: "/15"
    enabled: "{{ _interval == '15s' }}"
  - trigger: time_pattern
    seconds: "/30"
    enabled: "{{ _interval == '30s' }}"
  - trigger: time_pattern
    minutes: "/1"
    enabled: "{{ _interval == '1m' }}"
  - trigger: time_pattern
    minutes: "/5"
    enabled: "{{ _interval == '5m' }}"

conditions:
  - condition: template
    value_template: >-
      {% if persons | length > 0 %}
        {{ expand(persons) | selectattr('state','equalto','home') | list | count > 0 }}
      {% else %} true {% endif %}

  - condition: state
    entity_id: !input enabled_flag
    state: "on"

  - condition: state
    entity_id: !input manual_override
    state: "off"

  - condition: time
    after: !input start_time
    before: !input end_time
    weekday: !input days

actions:
  - variables:
      zones:        !input zones
      low:          !input low_temp
      high:         !input high_temp
      dry_t:        !input dry_temp
      hum_h:        !input hum_high
      heat_sp:      !input heat_set
      cool_sp:      !input cool_set
      heat_buf:     !input heat_hysteresis
      cool_buf:     !input cool_hysteresis
      dry_buf:      !input dry_hysteresis
      damper_delay: !input damper_delay
      allow_heat:   !input allow_heat
      allow_cool:   !input allow_cool
      allow_dry:    !input allow_dry
      control_head:    !input control_head_unit
      control_dampers: !input control_dampers
      sync_script:  !input temperature_sync_script

      zone_data: >-
        {% set ns = namespace(out=[]) %}
        {% for z in zones %}
          {# Normalize sensors: allow single entity_id or list #}
          {% set t_ents = z.temp_sensors if (z.temp_sensors is list or z.temp_sensors is tuple) else ([z.temp_sensors] if (z.temp_sensors is defined and z.temp_sensors is not none and z.temp_sensors != '') else []) %}
          {% set h_ents = z.humidity_sensors if (z.humidity_sensors is list or z.humidity_sensors is tuple) else ([z.humidity_sensors] if (z.humidity_sensors is defined and z.humidity_sensors is not none and z.humidity_sensors != '') else []) %}
          {% set has_sensors = (t_ents | length > 0) or (h_ents | length > 0) %}

          {% set enabled = true %}
          {% if z.enabled_flag is defined and z.enabled_flag not in ['', none] %}
            {% set enabled = is_state(z.enabled_flag, 'on') %}
          {% endif %}

          {% if z.damper_switch %}
            {% set data = {
              'switch': z.damper_switch,
              'temp': none,
              'hum': none,
              'heat': 0,
              'cool': 0,
              'dry': 0,
              'urgency': 0
            } %}

            {% if enabled and has_sensors %}
              {% set t_vals = expand(t_ents)
                 | map(attribute='state')
                 | reject('in', ['unknown','unavailable','none','None','null'])
                 | map('float') | list %}
              {% set h_vals = expand(h_ents)
                 | map(attribute='state')
                 | reject('in', ['unknown','unavailable','none','None','null'])
                 | map('float') | list %}

              {% set temp = (t_vals | average(default=none)) %}
              {% set hum  = (h_vals | average(default=none)) %}

              {% set z_low    = (z.low_temp  | default(low,  true)) | float %}
              {% set z_high   = (z.high_temp | default(high, true)) | float %}
              {% set z_dry_t  = (z.dry_temp  | default(dry_t, true))| float %}
              {% set z_hum_h  = (z.hum_high  | default(hum_h, true))| float %}

              {% set hbuf = heat_buf | float(0) %}
              {% set cbuf = cool_buf | float(0) %}
              {% set dbuf = dry_buf  | float(0) %}

              {% set heat_sc = (z_low - temp)
                 if (allow_heat and temp is not none and temp < z_low - hbuf) else 0 %}
              {% set cool_sc = (temp - z_high)
                 if (allow_cool and temp is not none and temp > z_high + cbuf) else 0 %}
              {% set dry_sc  = (hum - z_hum_h)
                 if (allow_dry and hum  is not none and hum  > z_hum_h + dbuf and temp is not none and temp > z_dry_t) else 0 %}
              {% set urg = [heat_sc, cool_sc, dry_sc] | max %}

              {% set data = {
                'switch':   z.damper_switch,
                'temp':     temp,
                'hum':      hum,
                'heat':     heat_sc,
                'cool':     cool_sc,
                'dry':      dry_sc,
                'urgency':  urg
              } %}
            {% endif %}

            {% set ns.out = ns.out + [data] %}
          {% endif %}
        {% endfor %}
        {{ ns.out | sort(attribute='urgency', reverse=true) }}

      scores: >-
        {% set heats = zone_data | map(attribute='heat') | list %}
        {% set cools = zone_data | map(attribute='cool') | list %}
        {% set drys  = zone_data | map(attribute='dry')  | list %}
        {{ {
          "heat": (heats | default([0]) | max),
          "cool": (cools | default([0]) | max),
          "dry":  (drys  | default([0]) | max)
        } }}

      mode: >-
        {% set best = scores | dictsort(by='value', reverse=true) | first %}
        {{ best[0] if best and best[1] > 0 else 'off' }}

      set_temp: >-
        {% if mode == 'heat' %}{{ heat_sp | float(low) }}
        {% elif mode == 'cool' %}{{ cool_sp | float(high) }}
        {% else %}none{% endif %}

  - choose:
      - conditions: "{{ control_head }}"
        sequence:
          - action: climate.set_hvac_mode
            target:
              entity_id: !input head_unit
            data:
              hvac_mode: "{{ mode }}"
          - choose:
              - conditions: "{{ mode in ['heat', 'cool'] }}"
                sequence:
                  - action: climate.set_temperature
                    target:
                      entity_id: !input head_unit
                    data:
                      temperature: "{{ set_temp }}"
                  - choose:
                      - conditions: "{{ sync_script is defined and sync_script not in [none, '', []] }}"
                        sequence:
                          - action: script.turn_on
                            target:
                              entity_id: "{{ sync_script }}"

  - choose:
      - conditions: "{{ control_dampers }}"
        sequence:
          - repeat:
              for_each: "{{ zone_data }}"
              sequence:
                - delay:
                    seconds: "{{ damper_delay | int }}"
                - choose:
                    - conditions: "{{ repeat.item.urgency > 0 }}"
                      sequence:
                        - action: switch.turn_on
                          target:
                            entity_id: "{{ repeat.item.switch }}"
                  default:
                    - action: switch.turn_off
                      target:
                        entity_id: "{{ repeat.item.switch }}"

mode: restart
